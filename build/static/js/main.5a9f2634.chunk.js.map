{"version":3,"sources":["firebase/config.js","firebase/firebase.js","firebase/index.js","components/UX-UI/loading/Loading.js","components/UX-UI/scroller/Scroller.js","components/UX-UI/mouseTracker/MouseTracker.js","components/sections/homePage/HomePage.js","components/sections/homePage/index.js","utils/hooks/useCustomUx.js","components/fixedElements/menu/Menu.js","components/fixedElements/menu/index.js","components/fixedElements/pager/Pager.js","components/fixedElements/FixedElements.js","components/SectionControler.js","App.js","serviceWorker.js","index.js","firebase/context.js","utils/hooks/useBackground.js","utils/hooks/useTransition.js"],"names":["firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","constructor","login","provider","a","auth","signInWithPopup","logout","signOut","app","initializeApp","this","db","firestore","facebookProvider","FacebookAuthProvider","Loading","className","type","Scroller","MouseTracker","useState","offsetX","offsetY","friction","state","setState","useEffect","_mouseMove","e","followX","window","innerWidth","clientX","followY","innerHeight","clientY","x","y","prevState","document","addEventListener","removeEventListener","offset","transform","style","React","memo","section","filterFx","isChanging","tech","order","HomePage","useBackground","useTransition","useCustomUx","appContext","useContext","FirebaseContext","customUx","setCustomUx","sections","filter","id","idActivSection","map","Menu","listItem","setAppContext","settings","globalSettings","isMenuOpen","adress","zipcode","city","phone","isOpenMenu","onClick","prev","Pager","FixedElements","listSectionWithoutLabel","listSectionWithLabel","customClass","siteName","length","SectionControler","props","currentSlideIndex","getCurrentSlideIndex","renderSlidesNumbers","displayLabel","slidesCount","scrollToSlide","handleClick","i","setTimeout","slidesNumbers","buttonProps","disabled","key","push","title","Service","lazy","SavoirFaire","Contact","INITIAL_CONTEXT","targetSection","App","afterChange","from","to","beforeChange","updateSectionsContextWithFirebase","snapshot","docs","doc","data","updateGlobalSettingsContextWithFirebase","getSections","collection","orderBy","onSnapshot","getGlobalSettings","console","log","Provider","value","controls","duration","fallback","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","createContext","cssClass","setCssClass"],"mappings":"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","file":"static/js/main.5a9f2634.chunk.js","sourcesContent":["/** ATTENTION : ne pas exposer\n *\n * Configuration Firebase (Ã  retrouver sur l'interface Firebase)\n */\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_DIABLE_AU_CADRAN_API_KEY,\n  authDomain: process.env.REACT_APP_DIABLE_AU_CADRAN_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DIABLE_AU_CADRAN_DATABASE_URL,\n  projectId: process.env.REACT_APP_DIABLE_AU_CADRAN_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_DIABLE_AU_CADRAN_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_DIABLE_AU_CADRAN_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_DIABLE_AU_CADRAN_APP_ID,\n}\n\nexport default firebaseConfig\n","import app from \"firebase/app\"\nimport \"firebase/firestore\"\nimport \"firebase/auth\"\n\nimport firebaseConfig from \"./config\"\n\n/**\n * Class servant d'interface avec Firebase\n * Initialisation database, authentification facebook\n */\nclass Firebase {\n  constructor() {\n    app.initializeApp(firebaseConfig)\n    this.db = app.firestore()\n    this.facebookProvider = new app.auth.FacebookAuthProvider()\n    this.auth = app.auth()\n  }\n\n  login = async (provider) => {\n    await this.auth.signInWithPopup(this[`${provider}Provider`])\n  }\n  logout = async () => await this.auth.signOut()\n}\n\nconst firebase = new Firebase()\nexport default firebase\n","import firebase from \"./firebase\"\nimport FirebaseContext from \"./context\"\n\nexport { FirebaseContext }\n\nexport default firebase\n","import React from \"react\"\nimport ReactLoading from \"react-loading\"\n\nimport \"./style.css\"\n\nconst Loading = () => (\n  <div className='loading'>\n    <ReactLoading type='spinningBubbles' />\n  </div>\n)\n\nexport default Loading\n","import React from \"react\"\n\nimport \"./style/style.css\"\n\nconst Scroller = () => {\n  return (\n    <div className='scroll-info'>\n      <div className='mousey'>\n        <div className='scroller'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default Scroller\n","import React, { useEffect, useState } from \"react\"\n\nimport \"./style/style.css\"\n\nconst MouseTracker = () => {\n  const INITIAL_STATE = {\n    offsetX: 0,\n    offsetY: 0,\n    friction: 1 / 32,\n  }\n\n  const [state, setState] = useState(INITIAL_STATE)\n\n  useEffect(() => {\n    const _mouseMove = (e) => {\n      let followX = window.innerWidth / 2 - e.clientX\n      let followY = window.innerHeight / 2 - e.clientY\n      let x = 0,\n        y = 0\n      x += (-followX - x) * state.friction\n      y += (followY - y) * state.friction\n      setState((prevState) => {\n        return { ...prevState, offsetX: x, offsetY: y }\n      })\n    }\n\n    document.addEventListener(\"mousemove\", _mouseMove)\n\n    return () => {\n      document.removeEventListener(\"mousemove\", _mouseMove)\n    }\n  }, [state])\n\n  let offset = {\n    transform: `translate(-50%, -50%) perspective(600px)\n                rotateY(${state.offsetX}deg)\n                rotateX(${state.offsetY}deg)`,\n  }\n\n  return (\n    <div className='wrapper' style={offset}>\n      <div className='shape' />\n      <div className='shape2'>{/* <p>Le diable au cadran</p> */}</div>\n    </div>\n  )\n}\n\nexport default MouseTracker\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.init()\n//   }\n//   init() {\n//     this.state = {\n//       offsetX: \"\",\n//       offsetY: \"\",\n//       friction: 1 / 32\n//     }\n//     this._mouseMove = this._mouseMove.bind(this)\n//   }\n//   componentDidMount() {\n//     document.addEventListener(\"mousemove\", this._mouseMove)\n//   }\n//   componentWillUnmount() {\n//     document.removeEventListener(\"mousemove\", this._mouseMove)\n//   }\n//   _mouseMove(e) {\n//     let followX = window.innerWidth / 2 - e.clientX\n//     let followY = window.innerHeight / 2 - e.clientY\n\n//     let x = 0,\n//       y = 0\n//     x += (-followX - x) * this.state.friction\n//     y += (followY - y) * this.state.friction\n//     this.setState({\n//       offsetX: x,\n//       offsetY: y\n//     })\n//   }\n//   render() {\n//     let offset = {\n//       transform: `translate(-50%, -50%) perspective(600px)\n//                   rotateY(${this.state.offsetX}deg)\n//                   rotateX(${this.state.offsetY}deg)`\n//     }\n\n//     return (\n//       <div className='wrapper' style={offset}>\n//         <div className='shape'></div>\n//         <div className='shape2'></div>\n//         <p>Move your mouse or finger around</p>\n//       </div>\n//     )\n//   }\n// }\n// ReactDOM.render(<App />, document.getElementById(\"app\"))\n","import React from \"react\"\nimport \"./style/style.css\"\nimport Scroller from \"../../UX-UI/scroller/Scroller\"\nimport MouseTracker from \"../../UX-UI/mouseTracker/MouseTracker\"\n\n/**\n * Home page du site\n */\nconst HomePage = ({ section, filterFx, isChanging }) => {\n  if (section) {\n    return (\n      <div\n        className={`section section${section.tech.order} ${isChanging} homePage`}\n      >\n        <div className={`section-container ${filterFx}`}>\n          <MouseTracker />\n          <Scroller />\n        </div>\n      </div>\n    )\n  } else {\n    return null\n  }\n}\n\nexport default React.memo(HomePage)\n","import React from \"react\"\nimport \"./style/style.css\"\nimport useBackground from \"../../../utils/hooks/useBackground\"\nimport useTransition from \"../../../utils/hooks/useTransition\"\nimport Component from \"./HomePage\"\n\nconst HomePage = ({ section }) => {\n  const filterFx = useBackground()\n  const isChanging = useTransition()\n  return (\n    <Component section={section} filterFx={filterFx} isChanging={isChanging} />\n  )\n}\n\nexport default HomePage\n","import { useContext, useEffect, useState } from \"react\"\nimport FirebaseContext from \"../../firebase/context\"\n\nconst useCustomUx = () => {\n  const { appContext } = useContext(FirebaseContext)\n  const [customUx, setCustomUx] = useState(\"\")\n\n  useEffect(() => {\n    appContext.sections\n      .filter((section) => section.id === appContext.idActivSection)\n      .map((section) => {\n        return setCustomUx(`custom-section-${section.tech.order + 1}`)\n      })\n  }, [appContext.idActivSection])\n\n  return customUx\n}\n\nexport default useCustomUx\n","import React from \"react\"\nimport \"./style/style.css\"\n\nconst Menu = ({ listItem, appContext, setAppContext }) => {\n  const settings = appContext.globalSettings[0]\n  return (\n    <div className={`main-menu`}>\n      <div\n        className={\n          appContext.isMenuOpen ? \"list-item-menu open\" : \"list-item-menu\"\n        }\n      >\n        {listItem}\n        <div className={\"adress\"}>\n          <span>{settings && settings.adress}</span>\n          <span>\n            {settings && settings.zipcode} - {settings && settings.city}\n          </span>\n          <span>{settings && settings.phone}</span>\n        </div>\n      </div>\n      <div\n        className={appContext.isOpenMenu ? \"btn-menu open\" : \"btn-menu\"}\n        onClick={() =>\n          setAppContext((prev) => {\n            return {\n              ...prev,\n              isMenuOpen: !prev.isMenuOpen,\n            }\n          })\n        }\n      >\n        <p className='menu'>menu.</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Menu\n","import React, { useContext } from \"react\"\nimport FirebaseContext from \"../../../firebase/context\"\nimport \"./style/style.css\"\n\nimport Component from \"./Menu\"\n\nconst Menu = ({ listItem }) => {\n  const { appContext, setAppContext } = useContext(FirebaseContext)\n\n  return (\n    <Component\n      setAppContext={setAppContext}\n      appContext={appContext}\n      listItem={listItem}\n    />\n  )\n}\n\nexport default Menu\n","import React from \"react\"\nimport \"./style/style.css\"\n\nconst Pager = ({ listItem }) => {\n  return <div className={\"pager-item\"}>{listItem}</div>\n}\n\nexport default Pager\n","import React, { useContext } from \"react\"\nimport FirebaseContext from \"../../firebase/context\"\nimport useCustomUx from \"../../utils/hooks/useCustomUx\"\nimport Menu from \"./menu/\"\nimport Pager from \"./pager/Pager\"\n\nimport \"./style/style.css\"\n\nconst FixedElements = ({ listSectionWithoutLabel, listSectionWithLabel }) => {\n  const { appContext } = useContext(FirebaseContext)\n  const customClass = useCustomUx()\n\n  const siteName =\n    appContext.globalSettings.length && appContext.globalSettings[0].siteName\n\n  return (\n    <div className={`header ${customClass}`}>\n      <div className='site-name'>{siteName}</div>\n      <Menu listItem={listSectionWithLabel} />\n      <Pager listItem={listSectionWithoutLabel} />\n    </div>\n  )\n}\n\nexport default FixedElements\n","import React, { useContext } from \"react\"\nimport FirebaseContext from \"../firebase/context\"\nimport FixedElements from \"./fixedElements/FixedElements\"\n\n/**\n * Composant qui permet d'afficher les contrÃ´leurs du site (pager et menu latÃ©ral)\n * Il y a un seul contrÃ´leur pour deux composants\n * @param {} props\n */\nexport const SectionControler = (props) => {\n  const { appContext, setAppContext } = useContext(FirebaseContext)\n  const { getCurrentSlideIndex } = props\n  const currentSlideIndex = getCurrentSlideIndex()\n\n  const renderSlidesNumbers = (currentSlideIndex, displayLabel) => {\n    const { slidesCount, scrollToSlide } = props\n\n    // GÃ¨re le clic sur un des items (menu et pager)\n    const handleClick = (i) => {\n      if (appContext.isMenuOpen) {\n        setAppContext((prev) => {\n          return { ...prev, isMenuOpen: false, isChanging: true }\n        })\n      } else {\n        setAppContext((prev) => {\n          return { ...prev, isChanging: true }\n        })\n      }\n      setTimeout(() => scrollToSlide(i), 1000)\n    }\n\n    // Calcule le nom de balise slide il y a dans App.js et ajoute le nom de button\n    const slidesNumbers = []\n    for (let i = 0; i < slidesCount; i++) {\n      const buttonProps = {\n        disabled: currentSlideIndex === i,\n        className: \"item\",\n        key: i,\n        onClick: () => handleClick(i),\n      }\n      slidesNumbers.push(\n        <div {...buttonProps}>\n          {displayLabel && appContext.sections[i].title}\n        </div>\n      )\n    }\n    return slidesNumbers\n  }\n\n  return (\n    <FixedElements\n      listSectionWithoutLabel={renderSlidesNumbers(currentSlideIndex, false)}\n      listSectionWithLabel={renderSlidesNumbers(currentSlideIndex, true)}\n    />\n  )\n}\n","import React, { useState, useEffect, lazy, Suspense } from \"react\"\nimport { FullPage, Slide } from \"react-full-page\"\nimport firebase, { FirebaseContext } from \"./firebase\"\nimport Loading from \"./components/UX-UI/loading/Loading\"\nimport HomePage from \"./components/sections/homePage/\"\n// import Service from \"./components/sections/service/\"\n// import SavoirFaire from \"./components/sections/savoirFaire\"\n// import Contact from \"./components/sections/contact/\"\n\nimport { SectionControler } from \"./components/SectionControler\"\n\nimport \"./style/common.css\"\nimport \"./style/section.css\"\n\nconst Service = lazy(() => import(\"./components/sections/service/\"))\nconst SavoirFaire = lazy(() => import(\"./components/sections/savoirFaire\"))\nconst Contact = lazy(() => import(\"./components/sections/contact/\"))\n\n// Context de l'application\nconst INITIAL_CONTEXT = {\n  isChanging: false, // si l'utilisateur change de section\n  isMenuOpen: false, // si l'utilisateur ouvre la section\n  idActivSection: \"t6bys0zleWutaW74BnTu\", // id de la premiÃ¨re section\n  targetSection: {},\n  sections: {}, // obj avec les objets des sections\n  globalSettings: {},\n}\n\nexport const App = () => {\n  const [appContext, setAppContext] = useState(INITIAL_CONTEXT)\n\n  /**\n   * Met Ã  jour l'id de la section active dans le context\n   * @param {from, to} index de dÃ©part et d'arrivÃ©\n   */\n  const afterChange = ({ from, to }) => {\n    setAppContext((prev) => {\n      return {\n        ...prev,\n        idActivSection: appContext.sections[to].id,\n        isChanging: false,\n      }\n    })\n  }\n\n  const beforeChange = () => {\n    setAppContext((prev) => {\n      return {\n        ...prev,\n        isChanging: true,\n      }\n    })\n  }\n\n  /**\n   * Met Ã  jour le context (sections) avec les donnÃ©es reÃ§ues de firebase.\n   * Injection des sections dans le context.\n   * @param {*} snapshot\n   */\n  const updateSectionsContextWithFirebase = (snapshot) => {\n    const sections = snapshot.docs.map((doc) => {\n      const section = {\n        id: doc.id, // on ajoute l'identifiant du document dans la section\n        ...doc.data(), // on ajoute le reste des donnÃ©es\n      }\n      return section\n    })\n\n    setAppContext((prev) => {\n      return { ...prev, sections: sections }\n    })\n  }\n\n  /**\n   * Met Ã  jour le context (globalSettings) avec les donnÃ©es reÃ§ues de firebase.\n   * Injection des sections dans le context.\n   * @param {*} snapshot\n   */\n  const updateGlobalSettingsContextWithFirebase = (snapshot) => {\n    const settings = snapshot.docs.map((doc) => {\n      return doc.data()\n    })\n\n    setAppContext((prev) => {\n      return { ...prev, globalSettings: settings }\n    })\n  }\n\n  /**\n   * Met Ã  jour le context avec les donnÃ©es (firebase).\n   */\n  useEffect(() => {\n    const getSections = async () => {\n      firebase.db\n        .collection(\"sections\")\n        .orderBy(\"tech.order\", \"asc\")\n        .onSnapshot(updateSectionsContextWithFirebase)\n    }\n\n    const getGlobalSettings = async () => {\n      firebase.db\n        .collection(\"global\")\n        .onSnapshot(updateGlobalSettingsContextWithFirebase)\n    }\n\n    const doIt = () => {\n      getSections()\n\n      getGlobalSettings()\n    }\n    return doIt()\n  }, [])\n\n  if (!appContext.sections.length) {\n    return <Loading />\n  } else {\n    console.log(\"ici\")\n    return (\n      <FirebaseContext.Provider value={{ appContext, setAppContext, firebase }}>\n        <div className='sections'>\n          <FullPage\n            controls={SectionControler}\n            duration={1500}\n            afterChange={afterChange}\n            beforeChange={beforeChange}\n          >\n            <Slide>\n              <HomePage section={appContext.sections[0]} />\n            </Slide>\n            <Slide>\n              <Suspense fallback={<div>loading</div>}>\n                <Service section={appContext.sections[1]} />\n              </Suspense>\n            </Slide>\n            <Slide>\n              <Suspense fallback={<div>loading</div>}>\n                <SavoirFaire section={appContext.sections[2]} />\n              </Suspense>\n            </Slide>\n            <Slide>\n              <Suspense fallback={<div>loading</div>}>\n                <Contact section={appContext.sections[3]} />\n              </Suspense>\n            </Slide>\n          </FullPage>\n        </div>\n      </FirebaseContext.Provider>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then((registration) => {\n          console.log(\n            \"ServiceWorker registration successful with scope:\",\n            registration.scope\n          )\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport { App } from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","/**\n * CrÃ©ation du context de l'application\n */\nimport { createContext } from \"react\"\n\nconst FirebaseContext = createContext(null)\n\nexport default FirebaseContext\n","import { useContext, useEffect, useState } from \"react\"\nimport FirebaseContext from \"../../firebase/context\"\n\n/**\n * Hook qui Ã©coute l'ouverture du menu latÃ©ral et applice une filtre CSS\n *\n * Ouverture du menu latÃ©ral : on insÃ¨re la class filterFx dans le DOM\n */\nconst useBackground = () => {\n  const { appContext } = useContext(FirebaseContext)\n\n  const [cssClass, setCssClass] = useState(\"\")\n\n  useEffect(() => {\n    if (appContext.isMenuOpen || appContext.isChanging) {\n      setCssClass(\"filterFx\")\n    } else setCssClass(\"\")\n  }, [appContext.isMenuOpen, appContext.isChanging])\n\n  return cssClass\n}\n\nexport default useBackground\n","import { useContext, useEffect, useState } from \"react\"\nimport FirebaseContext from \"../../firebase/context\"\n\n/**\n * Hook qui Ã©coute s'il y a un changement de section en cours\n *\n * Changement en cours : on insÃ¨re la class css qui ajoute un border blanc\n */\nconst useTransition = () => {\n  const { appContext } = useContext(FirebaseContext)\n  const [cssClass, setCssClass] = useState(\"\")\n\n  useEffect(() => {\n    const cssClass = appContext.isChanging ? \"isChanging\" : \"\"\n    setCssClass(cssClass)\n  }, [appContext.isChanging])\n\n  return cssClass\n}\n\nexport default useTransition\n"],"sourceRoot":""}